swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "MOGT Smev3 API"
  termsOfService: "https://www.mogt.ru/"
  contact:
    email: "mogt_info@mosreg.ru"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
tags:
- name: "json2xml"
  description: "Json to xml conversion according to smev 3 xsd schemes"
- name: "smev signer"
  description: "Converting messages to smev-3.X format"
- name: "record repository"
  description: "manipulating and storing smev message series"
- name: "file repository"
  description: "manipulating and storing smev files"
- name: "smev connector"
  description: "connect and communicate with smev 3 endpoints"
- name: "plugins"
  description: "plugins"
schemes:
- "https"
- "http"
paths:
  /json2xml/{query_type}:
    post:
      tags:
      - "json2xml"
      summary: "Convert json to xml"
      description: ""
      operationId: "json2xml"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "query_type"
        in: "path"
        description: "Name smev type"
        required: true
        type: "string"
        format: "str"
      - in: "body"
        name: "body"
        description: "Smev message template"
        required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Json2XmlResponse"
  /signer/message/{cert_type}:
    post:
      tags:
      - "smev signer"
      summary: "Convert message to smev-3.X format"
      description: ""
      operationId: "signer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cert_type"
        in: "path"
        description: "Sertificate alias"
        required: true
        type: "string"
        format: "str"
      - in: "body"
        name: "body"
        description: "Smev message xml template"
        required: true
        schema:
          $ref: "#/definitions/SmevSignerRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SmevMesageXmlResponse"
  /signer/pkcs7/{cert_type}:
    post:
      tags:
      - "smev signer"
      summary: "make pkcs7 signature for a file"
      description: ""
      operationId: "signer"
      consumes:
      - "application/text"
      produces:
      - "application/text"
      parameters:
      - name: "cert_type"
        in: "path"
        description: "Sertificate alias"
        required: true
        type: "string"
        format: "str"
      - in: "body"
        name: "body"
        description: "base64 string of file"
        required: true
        type: "string"
        format: "base64"
      responses:
        "200":
          description: "successful operation"
          schema:
            description: "base64 string of pkcs7 signature"
            type: "string"
            format: "base64"
  /records:
    get:
      tags:
      - "record repository"
      summary: "Get all records"
      description: ""
      operationId: "get record"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "int"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Record"
  /record/{id}/new:
    get:
      tags:
      - "record repository"
      summary: "Create record with id"
      description: ""
      operationId: "create record"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Record"
  /record/{id}:
    get:
      tags:
      - "record repository"
      summary: "Get record by id"
      description: ""
      operationId: "get record"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Record"
    delete:
      tags:
      - "record repository"
      summary: "Delete record by id"
      description: ""
      operationId: "delete record"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              remove_records:
                type: "int"
  /record/{id}/{message_type}:
    get:
      tags:
      - "record repository"
      summary: "Get message from record"
      description: ""
      operationId: "get record message"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      - name: "message_type"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        enum:
        - "SendRequestRequest"
        - "SendResponseRequest"
        - "GetRequestRequest"
        - "GetResponseRequest"
        - "AckRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/RecordMessage"
    put:
      tags:
      - "record repository"
      summary: "Update record message"
      description: ""
      operationId: "put record message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      - name: "message_type"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        enum:
        - "SendRequestRequest"
        - "SendResponseRequest"
        - "GetRequestRequest"
        - "GetResponseRequest"
        - "AckRequest"
      - name: "body"
        in: "body"
        description: "record for update"
        required: true
        schema:
          $ref: "#/definitions/RecordMessageUpdate"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "xml"
  /record/{id}/{message_type}/xml:
    get:
      tags:
      - "record repository"
      summary: "Get message from record as xml"
      description: ""
      operationId: "get record message"
      produces:
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      - name: "message_type"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        enum:
        - "SendRequestRequest"
        - "SendResponseRequest"
        - "GetRequestRequest"
        - "GetResponseRequest"
        - "AckRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
            format: "xml"
  /record/{id}/{message_type}/id:
    get:
      tags:
      - "record repository"
      summary: "Get messageId element"
      description: ""
      operationId: "get record message"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      - name: "message_type"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        enum:
        - "SendRequestRequest"
        - "SendResponseRequest"
        - "GetRequestRequest"
        - "GetResponseRequest"
        - "AckRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                format: "uuid"
  /record/{id}/{message_type}/tfp_attachment:
    get:
      tags:
      - "record repository"
      summary: "Get smev ftp attachment info"
      description: ""
      operationId: "get_tfp_attachment"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        format: "uuid"
      - name: "message_type"
        in: "path"
        description: "record id"
        required: true
        type: "string"
        enum:
        - "GetRequestResponse"
        - "GetResponseResponse"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              user:
                type: "string"
                format: "smev ftp user"
              password:
                type: "string"
                format: "smev ftp password"
              path:
                type: "string"
                format: "smev ftp file path"
  /file/new:
    post:
      tags:
      - "file repository"
      summary: "create new file"
      description: ""
      operationId: "new file"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "upload file"
        required: true
        type: "binary"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                format: "hash"
              path:
                type: "string"
                format: "path"
  /file/merge:
    post:
      tags:
      - "file repository"
      summary: "Merge files"
      description: ""
      operationId: "merge files"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "upload file"
        required: true
        schema:
          type: "object"
          properties:
            ids:
              items:
                type: "string"
                format: "hash id"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                format: "hash id"
              path:
                type: "string"
                format: "path"
  /file/from_smev:
    post:
      tags:
      - "file repository"
      summary: "Get file from smev ftp"
      description: ""
      operationId: "from smev ftp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "upload file"
        required: true
        schema:
          type: "object"
          properties:
            user:
              type: "string"
              format: "smev ftp user"
            password:
              type: "string"
              format: "smev ftp password"
            path:
              type: "string"
              format: "ftp path"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              job:
                type: "string"
                format: "tsak id"
  /file/from_smev/{task_id}:
    get:
      tags:
      - "file repository"
      summary: "Get file from smev ftp (check tsak status)"
      description: ""
      operationId: "from smev ftp - get sttus"
      produces:
      - "application/json"
      parameters:
      - name: "task_id"
        in: "path"
        description: "task id"
        required: true
        type: "string"
      responses:
        "201":
          description: "ststus response"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                format: "status"
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                format: "hash id"
              path:
                type: "string"
                format: "path"
  /file/{id}:
    get:
      tags:
      - "file repository"
      summary: "Get file"
      description: ""
      operationId: "get file"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "id"
        in: "path"
        description: "file hash id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "binary"
            format: "file"
  /file/{id}/attachment/{alias}:
    get:
      tags:
      - "file repository"
      summary: "Get attachment from file"
      description: ""
      operationId: "attachment from file"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "file hash id"
        required: true
        type: "string"
      - name: "alias"
        in: "path"
        description: "sertificate alias"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              fileName:
                type: "string"
                format: "path"
              mimeType:
                type: "string"
                format: "mime type"
              signature:
                type: "string"
                format: "base64 (pkcs7)"
              content:
                type: "string"
                format: "base64"
  /files:
    get:
      tags:
      - "file repository"
      summary: "Get files"
      description: ""
      operationId: "get files"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "page number"
        required: false
        type: "int"
      responses:
        "200":
          description: "ststus response"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "string"
                  format: "file hash id"
                path:
                  type: "string"
                  format: "path"
  /send-to-smev/{smev_server_alias}:
    post:
      tags:
      - "smev connector"
      summary: "send message to smev"
      description: ""
      operationId: "send message to smev"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "smev_server_alias"
        in: "path"
        description: "Smev server alias"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "smev message"
        required: true
        schema:
          type: "object"
          properties:
            id:
              type: "string"
              format: "uuid"
            xml:
              type: "string"
              format: "xml"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                format: "uuid"
              xml:
                type: "string"
                format: "xml"
  /plugin/{plugin_name}:
    post:
      tags:
      - "plugins"
      summary: "call plugin"
      description: ""
      operationId: "call plugi"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "plugin_name"
        in: "path"
        description: "Plugin name"
        required: true
      - in: "body"
        name: "body"
        description: "smev message"
        required: true
        type: json
      responses:
        "200":
          description: "successful operation"
          schema:
            type: json
            
definitions:
  Json2XmlResponse:
    type: "object"
    properties:
      xml:
        type: "string"
        format: "xml"
  SmevSignerRequest:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid or 0"
      xml:
        type: "string"
        format: "xml"
      to:
        type: "string"
        format: "uuid"
        required: false
      msgType:
        type: "string"
        enum:
        - "SendRequestRequest"
        - "SendResponseRequest"
        - "GetRequestRequest"
        - "GetResponseRequest"
        - "AckRequest"
      tagForSign:
        type: "string"
        enum:
        - "SIGNED_BY_CONSUMER"
        - "SIGNED_BY_CALLER"
      attachments:
        type: "array"
        items:
          type: "string"
          format: "file id"

  SmevMesageXmlResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      xml:
        type: "string"
        format: "xml"

  Record:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      date:
        type: "string"
        format: "datetime (UTC)"
      mesages:
        type: "array"
        items:
          type: "string"
          enum:
          - "SendRequestRequest"
          - "SendResponseRequest"
          - "GetRequestRequest"
          - "GetResponseRequest"
          - "AckRequest"
  RecordMessage:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      xml:
        type: "string"
        format: "xml"
  RecordMessageUpdate:
    type: "object"
    properties:
      xml:
        type: "string"
        format: "xml"
  RecordMessageUpdateResponse:
    type: "object"
    properties:
      updated_records:
        type: "int"

externalDocs:
  description: "Find out more about"
  url: "http://mogt"